{"version":3,"sources":["webpack://adam-imeson.github.io/./src/components/layout.js","webpack://adam-imeson.github.io/./src/pages/sslskimmer.js"],"names":["Layout","children","Home","href"],"mappings":"gLAEe,SAASA,EAAT,GAA+B,IAAbC,EAAY,EAAZA,SAC/B,OAAO,2BAAMA,K,uGCAA,SAASC,IACtB,OACC,gBAAC,IAAD,KACC,4BACI,4CAEJ,4BACA,2BACI,wCACF,2BACE,yFAAgE,qBAAGC,KAAK,wCAAR,YAAhE,6iBASA,qCAAY,qBAAGA,KAAK,wGAAR,gBAAZ,2FAAmO,qBAAGA,KAAK,4CAAR,aAAnO,kLAIA,+pBAUA,8IAAqH,qBAAGA,KAAK,wDAAR,uBAArH,ijBASA,gDAAuB,qBAAGA,KAAK,6CAAR,YAAvB","file":"component---src-pages-sslskimmer-js-9bcd19e60bd9e720a9bd.js","sourcesContent":["import React from \"react\"\nimport \"./layout.css\"\nexport default function Layout({ children }) {\n  return <div>{children}</div>\n}\n","import React from \"react\"\nimport Layout from \"../components/layout\"\n\nexport default function Home() {\n  return (\n  \t<Layout>\n    <head>\n        <title>SSLskimmer</title>\n      </head>\n  \t\t<body>\n    <div>\n        <h1>SSLskimmer</h1>\n      <div>\n        <p>In 2009, Moxie Marlinspike released an attack by the name of <a href=\"https://moxie.org/software/sslstrip/\">SSLstrip</a>.\n  It allows man-in-the-middle attackers to strip the security from HTTPS\n server responses, forwarding naked HTTP to the victim.  If the victim \ndoes not notice that they are no longer using a secure connection they \nare likely to submit login details and other sensitive information to \nstripped pages.  The attacker reads the information before forwarding it\n to the server.  I find this attack to be intriguing because it lies at \nthe intersection of three different weak points in internet security: \nTLS certificates, browser warnings, and user education.</p>\n        <p>I gave a <a href=\"https://docs.google.com/presentation/d/1fENuA1fRX_w9yTrOpYyWOPsPKNkd423y9IxjGN0Wo0s/edit?usp=sharing\">presentation</a> on the most current methods of performing the attack, particularly Leonardo Nve Egea's <a href=\"https://github.com/byt3bl33d3r/sslstrip2\">SSLstrip+</a>.\n  This version uses a spoofed DNS server to avoid failing to HTTP Strict\n Transport Security (HSTS) preloading by browsers, but does not defeat \nHTTP Public Key Pinning (HPKP).</p>\n        <p>While HPKP seems to be an effective countermeasure for the time \nbeing, its low adoption rate relative to HSTS leaves many connections \nopen to attack.  There are also several browsers that have lagged behind\n the adoption curve for HSTS.  These connections are all vulnerable; \nhowever, they are protected via herd immunity.  Users of non-vulnerable \nbrowsers are likely to raise concerns when presented with obvious signs \nof MITM attacks such as the large error messages and warning screens \nthat most browsers provide.  This results in a situation of herd \nimmunity; the uninoculated users are protected from broad-spectrum \nattacks by the immune.</p>\n        <p>I propose a method for circumventing this crowd-based defence.  Lee Brotherston has demonstrated the viability of <a href=\"https://github.com/LeeBrotherston/tls-fingerprinting\">TLS fingerprinting,</a> where we examine Client Hello messages to determine traits of the \nsystem that sent each message.  By checking the TLS version, available \nciphersuites, and ordering of available ciphersuites against a prebuilt \ndatabase of known Client Hello traits, we can determine which variety of\n browser sent the traffic we have intercepted.  Armed with this \ninformation it is possible to selectively attack only users who are \nknown to be vulnerable while we fly under the radar of everyone who \nisn't, thereby resurrecting an attack previously considered to be \nobsolete.</p>\n        <p>I've put together a <a href=\"https://github.com/adam-imeson/sslskimmer\">git repo</a> of relevant tools and instructions.  I was able to selectively target \nindividual devices after gaining information on their TLS \nconfigurations.  Primary recommendation: enforce a canonical ordering of\n TLS ciphersuites in Client Hellos.  Secondary recommendation: avoid \nrelying on herd immunity as a defence against attacks.</p>\n      </div>\n    </div>\n</body>\n  \t</Layout>\n  );\n}\n"],"sourceRoot":""}